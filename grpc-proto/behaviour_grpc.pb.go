// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: grpc-proto/behaviour.proto

package grpc_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BehaviourService_PingApiBehaviour_FullMethodName = "/behaviour.BehaviourService/PingApiBehaviour"
	BehaviourService_BehaviourFetch_FullMethodName   = "/behaviour.BehaviourService/BehaviourFetch"
	BehaviourService_CCSubmit_FullMethodName         = "/behaviour.BehaviourService/CCSubmit"
)

// BehaviourServiceClient is the client API for BehaviourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BehaviourServiceClient interface {
	PingApiBehaviour(ctx context.Context, in *PingApiBehaviourRequest, opts ...grpc.CallOption) (*PingApiBehaviourResponse, error)
	BehaviourFetch(ctx context.Context, in *BehaviourFetchRequest, opts ...grpc.CallOption) (*BehaviourFetchResponse, error)
	CCSubmit(ctx context.Context, in *CCSubmitRequest, opts ...grpc.CallOption) (*CCSubmitResponse, error)
}

type behaviourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBehaviourServiceClient(cc grpc.ClientConnInterface) BehaviourServiceClient {
	return &behaviourServiceClient{cc}
}

func (c *behaviourServiceClient) PingApiBehaviour(ctx context.Context, in *PingApiBehaviourRequest, opts ...grpc.CallOption) (*PingApiBehaviourResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingApiBehaviourResponse)
	err := c.cc.Invoke(ctx, BehaviourService_PingApiBehaviour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) BehaviourFetch(ctx context.Context, in *BehaviourFetchRequest, opts ...grpc.CallOption) (*BehaviourFetchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BehaviourFetchResponse)
	err := c.cc.Invoke(ctx, BehaviourService_BehaviourFetch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) CCSubmit(ctx context.Context, in *CCSubmitRequest, opts ...grpc.CallOption) (*CCSubmitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CCSubmitResponse)
	err := c.cc.Invoke(ctx, BehaviourService_CCSubmit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BehaviourServiceServer is the server API for BehaviourService service.
// All implementations must embed UnimplementedBehaviourServiceServer
// for forward compatibility.
type BehaviourServiceServer interface {
	PingApiBehaviour(context.Context, *PingApiBehaviourRequest) (*PingApiBehaviourResponse, error)
	BehaviourFetch(context.Context, *BehaviourFetchRequest) (*BehaviourFetchResponse, error)
	CCSubmit(context.Context, *CCSubmitRequest) (*CCSubmitResponse, error)
	mustEmbedUnimplementedBehaviourServiceServer()
}

// UnimplementedBehaviourServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBehaviourServiceServer struct{}

func (UnimplementedBehaviourServiceServer) PingApiBehaviour(context.Context, *PingApiBehaviourRequest) (*PingApiBehaviourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingApiBehaviour not implemented")
}
func (UnimplementedBehaviourServiceServer) BehaviourFetch(context.Context, *BehaviourFetchRequest) (*BehaviourFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BehaviourFetch not implemented")
}
func (UnimplementedBehaviourServiceServer) CCSubmit(context.Context, *CCSubmitRequest) (*CCSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CCSubmit not implemented")
}
func (UnimplementedBehaviourServiceServer) mustEmbedUnimplementedBehaviourServiceServer() {}
func (UnimplementedBehaviourServiceServer) testEmbeddedByValue()                          {}

// UnsafeBehaviourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BehaviourServiceServer will
// result in compilation errors.
type UnsafeBehaviourServiceServer interface {
	mustEmbedUnimplementedBehaviourServiceServer()
}

func RegisterBehaviourServiceServer(s grpc.ServiceRegistrar, srv BehaviourServiceServer) {
	// If the following call pancis, it indicates UnimplementedBehaviourServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BehaviourService_ServiceDesc, srv)
}

func _BehaviourService_PingApiBehaviour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingApiBehaviourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviourServiceServer).PingApiBehaviour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviourService_PingApiBehaviour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviourServiceServer).PingApiBehaviour(ctx, req.(*PingApiBehaviourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BehaviourService_BehaviourFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BehaviourFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviourServiceServer).BehaviourFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviourService_BehaviourFetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviourServiceServer).BehaviourFetch(ctx, req.(*BehaviourFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BehaviourService_CCSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviourServiceServer).CCSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BehaviourService_CCSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviourServiceServer).CCSubmit(ctx, req.(*CCSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BehaviourService_ServiceDesc is the grpc.ServiceDesc for BehaviourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BehaviourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "behaviour.BehaviourService",
	HandlerType: (*BehaviourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingApiBehaviour",
			Handler:    _BehaviourService_PingApiBehaviour_Handler,
		},
		{
			MethodName: "BehaviourFetch",
			Handler:    _BehaviourService_BehaviourFetch_Handler,
		},
		{
			MethodName: "CCSubmit",
			Handler:    _BehaviourService_CCSubmit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-proto/behaviour.proto",
}
