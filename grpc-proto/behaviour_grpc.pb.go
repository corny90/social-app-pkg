// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc-proto/behaviour.proto

package grpc_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BehaviourServiceClient is the client API for BehaviourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BehaviourServiceClient interface {
	PingApiBehaviour(ctx context.Context, in *PingApiBehaviourRequest, opts ...grpc.CallOption) (*PingApiBehaviourResponse, error)
	BehaviourFetch(ctx context.Context, in *BehaviourFetchRequest, opts ...grpc.CallOption) (*BehaviourFetchResponse, error)
}

type behaviourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBehaviourServiceClient(cc grpc.ClientConnInterface) BehaviourServiceClient {
	return &behaviourServiceClient{cc}
}

func (c *behaviourServiceClient) PingApiBehaviour(ctx context.Context, in *PingApiBehaviourRequest, opts ...grpc.CallOption) (*PingApiBehaviourResponse, error) {
	out := new(PingApiBehaviourResponse)
	err := c.cc.Invoke(ctx, "/behaviour.BehaviourService/PingApiBehaviour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *behaviourServiceClient) BehaviourFetch(ctx context.Context, in *BehaviourFetchRequest, opts ...grpc.CallOption) (*BehaviourFetchResponse, error) {
	out := new(BehaviourFetchResponse)
	err := c.cc.Invoke(ctx, "/behaviour.BehaviourService/BehaviourFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BehaviourServiceServer is the server API for BehaviourService service.
// All implementations must embed UnimplementedBehaviourServiceServer
// for forward compatibility
type BehaviourServiceServer interface {
	PingApiBehaviour(context.Context, *PingApiBehaviourRequest) (*PingApiBehaviourResponse, error)
	BehaviourFetch(context.Context, *BehaviourFetchRequest) (*BehaviourFetchResponse, error)
	mustEmbedUnimplementedBehaviourServiceServer()
}

// UnimplementedBehaviourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBehaviourServiceServer struct {
}

func (UnimplementedBehaviourServiceServer) PingApiBehaviour(context.Context, *PingApiBehaviourRequest) (*PingApiBehaviourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingApiBehaviour not implemented")
}
func (UnimplementedBehaviourServiceServer) BehaviourFetch(context.Context, *BehaviourFetchRequest) (*BehaviourFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BehaviourFetch not implemented")
}
func (UnimplementedBehaviourServiceServer) mustEmbedUnimplementedBehaviourServiceServer() {}

// UnsafeBehaviourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BehaviourServiceServer will
// result in compilation errors.
type UnsafeBehaviourServiceServer interface {
	mustEmbedUnimplementedBehaviourServiceServer()
}

func RegisterBehaviourServiceServer(s grpc.ServiceRegistrar, srv BehaviourServiceServer) {
	s.RegisterService(&BehaviourService_ServiceDesc, srv)
}

func _BehaviourService_PingApiBehaviour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingApiBehaviourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviourServiceServer).PingApiBehaviour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/behaviour.BehaviourService/PingApiBehaviour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviourServiceServer).PingApiBehaviour(ctx, req.(*PingApiBehaviourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BehaviourService_BehaviourFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BehaviourFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviourServiceServer).BehaviourFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/behaviour.BehaviourService/BehaviourFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviourServiceServer).BehaviourFetch(ctx, req.(*BehaviourFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BehaviourService_ServiceDesc is the grpc.ServiceDesc for BehaviourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BehaviourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "behaviour.BehaviourService",
	HandlerType: (*BehaviourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingApiBehaviour",
			Handler:    _BehaviourService_PingApiBehaviour_Handler,
		},
		{
			MethodName: "BehaviourFetch",
			Handler:    _BehaviourService_BehaviourFetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-proto/behaviour.proto",
}
