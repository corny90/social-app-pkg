// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc-proto/social.proto

package grpc_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SocialServiceClient is the client API for SocialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SocialServiceClient interface {
	PingApiSocial(ctx context.Context, in *PingApiSocialRequest, opts ...grpc.CallOption) (*PingApiSocialResponse, error)
	PostCreate(ctx context.Context, in *PostCreateRequest, opts ...grpc.CallOption) (*PostCreateResponse, error)
	PostsFetchByUserID(ctx context.Context, in *PostsFetchByUserIDRequest, opts ...grpc.CallOption) (*PostsFetchByUserIDResponse, error)
	PostDelete(ctx context.Context, in *PostDeleteRequest, opts ...grpc.CallOption) (*PostDeleteResponse, error)
	PostsFetchVirtualLatest(ctx context.Context, in *PostsFetchVirtualLatestRequest, opts ...grpc.CallOption) (*PostsFetchVirtualLatestResponse, error)
	PostsFetchByKeyword(ctx context.Context, in *PostsFetchByKeywordRequest, opts ...grpc.CallOption) (*PostsFetchByKeywordResponse, error)
	PostsFetchByKeywords(ctx context.Context, in *PostsFetchByKeywordsRequest, opts ...grpc.CallOption) (*PostsFetchByKeywordsResponse, error)
	PostsFetchAllKeywords(ctx context.Context, in *PostsFetchAllKeywordsRequest, opts ...grpc.CallOption) (*PostsFetchAllKeywordsResponse, error)
	PostToggleLike(ctx context.Context, in *PostToggleLikeRequest, opts ...grpc.CallOption) (*PostToggleLikeResponse, error)
	PostFetchLikes(ctx context.Context, in *PostFetchLikesRequest, opts ...grpc.CallOption) (*PostFetchLikesResponse, error)
	PostFetchViews(ctx context.Context, in *PostFetchViewsRequest, opts ...grpc.CallOption) (*PostFetchViewsResponse, error)
	PostCommentCreate(ctx context.Context, in *PostCommentCreateRequest, opts ...grpc.CallOption) (*PostCommentCreateResponse, error)
	PostCommentsFetch(ctx context.Context, in *PostCommentsFetchRequest, opts ...grpc.CallOption) (*PostCommentsFetchResponse, error)
	PostCommentDelete(ctx context.Context, in *PostCommentDeleteRequest, opts ...grpc.CallOption) (*PostCommentDeleteResponse, error)
	FollowCreate(ctx context.Context, in *FollowCreateRequest, opts ...grpc.CallOption) (*FollowCreateResponse, error)
	FollowDelete(ctx context.Context, in *FollowDeleteRequest, opts ...grpc.CallOption) (*FollowDeleteResponse, error)
	FollowingsFetch(ctx context.Context, in *FollowingsFetchRequest, opts ...grpc.CallOption) (*FollowingsFetchResponse, error)
	FollowersFetch(ctx context.Context, in *FollowersFetchRequest, opts ...grpc.CallOption) (*FollowersFetchResponse, error)
	FollowsCounterFetch(ctx context.Context, in *FollowsCounterFetchRequest, opts ...grpc.CallOption) (*FollowsCounterFetchResponse, error)
}

type socialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSocialServiceClient(cc grpc.ClientConnInterface) SocialServiceClient {
	return &socialServiceClient{cc}
}

func (c *socialServiceClient) PingApiSocial(ctx context.Context, in *PingApiSocialRequest, opts ...grpc.CallOption) (*PingApiSocialResponse, error) {
	out := new(PingApiSocialResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PingApiSocial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostCreate(ctx context.Context, in *PostCreateRequest, opts ...grpc.CallOption) (*PostCreateResponse, error) {
	out := new(PostCreateResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostsFetchByUserID(ctx context.Context, in *PostsFetchByUserIDRequest, opts ...grpc.CallOption) (*PostsFetchByUserIDResponse, error) {
	out := new(PostsFetchByUserIDResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostsFetchByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostDelete(ctx context.Context, in *PostDeleteRequest, opts ...grpc.CallOption) (*PostDeleteResponse, error) {
	out := new(PostDeleteResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostsFetchVirtualLatest(ctx context.Context, in *PostsFetchVirtualLatestRequest, opts ...grpc.CallOption) (*PostsFetchVirtualLatestResponse, error) {
	out := new(PostsFetchVirtualLatestResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostsFetchVirtualLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostsFetchByKeyword(ctx context.Context, in *PostsFetchByKeywordRequest, opts ...grpc.CallOption) (*PostsFetchByKeywordResponse, error) {
	out := new(PostsFetchByKeywordResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostsFetchByKeyword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostsFetchByKeywords(ctx context.Context, in *PostsFetchByKeywordsRequest, opts ...grpc.CallOption) (*PostsFetchByKeywordsResponse, error) {
	out := new(PostsFetchByKeywordsResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostsFetchByKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostsFetchAllKeywords(ctx context.Context, in *PostsFetchAllKeywordsRequest, opts ...grpc.CallOption) (*PostsFetchAllKeywordsResponse, error) {
	out := new(PostsFetchAllKeywordsResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostsFetchAllKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostToggleLike(ctx context.Context, in *PostToggleLikeRequest, opts ...grpc.CallOption) (*PostToggleLikeResponse, error) {
	out := new(PostToggleLikeResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostToggleLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostFetchLikes(ctx context.Context, in *PostFetchLikesRequest, opts ...grpc.CallOption) (*PostFetchLikesResponse, error) {
	out := new(PostFetchLikesResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostFetchLikes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostFetchViews(ctx context.Context, in *PostFetchViewsRequest, opts ...grpc.CallOption) (*PostFetchViewsResponse, error) {
	out := new(PostFetchViewsResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostFetchViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostCommentCreate(ctx context.Context, in *PostCommentCreateRequest, opts ...grpc.CallOption) (*PostCommentCreateResponse, error) {
	out := new(PostCommentCreateResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostCommentCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostCommentsFetch(ctx context.Context, in *PostCommentsFetchRequest, opts ...grpc.CallOption) (*PostCommentsFetchResponse, error) {
	out := new(PostCommentsFetchResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostCommentsFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) PostCommentDelete(ctx context.Context, in *PostCommentDeleteRequest, opts ...grpc.CallOption) (*PostCommentDeleteResponse, error) {
	out := new(PostCommentDeleteResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/PostCommentDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) FollowCreate(ctx context.Context, in *FollowCreateRequest, opts ...grpc.CallOption) (*FollowCreateResponse, error) {
	out := new(FollowCreateResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/FollowCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) FollowDelete(ctx context.Context, in *FollowDeleteRequest, opts ...grpc.CallOption) (*FollowDeleteResponse, error) {
	out := new(FollowDeleteResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/FollowDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) FollowingsFetch(ctx context.Context, in *FollowingsFetchRequest, opts ...grpc.CallOption) (*FollowingsFetchResponse, error) {
	out := new(FollowingsFetchResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/FollowingsFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) FollowersFetch(ctx context.Context, in *FollowersFetchRequest, opts ...grpc.CallOption) (*FollowersFetchResponse, error) {
	out := new(FollowersFetchResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/FollowersFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialServiceClient) FollowsCounterFetch(ctx context.Context, in *FollowsCounterFetchRequest, opts ...grpc.CallOption) (*FollowsCounterFetchResponse, error) {
	out := new(FollowsCounterFetchResponse)
	err := c.cc.Invoke(ctx, "/social.SocialService/FollowsCounterFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServiceServer is the server API for SocialService service.
// All implementations must embed UnimplementedSocialServiceServer
// for forward compatibility
type SocialServiceServer interface {
	PingApiSocial(context.Context, *PingApiSocialRequest) (*PingApiSocialResponse, error)
	PostCreate(context.Context, *PostCreateRequest) (*PostCreateResponse, error)
	PostsFetchByUserID(context.Context, *PostsFetchByUserIDRequest) (*PostsFetchByUserIDResponse, error)
	PostDelete(context.Context, *PostDeleteRequest) (*PostDeleteResponse, error)
	PostsFetchVirtualLatest(context.Context, *PostsFetchVirtualLatestRequest) (*PostsFetchVirtualLatestResponse, error)
	PostsFetchByKeyword(context.Context, *PostsFetchByKeywordRequest) (*PostsFetchByKeywordResponse, error)
	PostsFetchByKeywords(context.Context, *PostsFetchByKeywordsRequest) (*PostsFetchByKeywordsResponse, error)
	PostsFetchAllKeywords(context.Context, *PostsFetchAllKeywordsRequest) (*PostsFetchAllKeywordsResponse, error)
	PostToggleLike(context.Context, *PostToggleLikeRequest) (*PostToggleLikeResponse, error)
	PostFetchLikes(context.Context, *PostFetchLikesRequest) (*PostFetchLikesResponse, error)
	PostFetchViews(context.Context, *PostFetchViewsRequest) (*PostFetchViewsResponse, error)
	PostCommentCreate(context.Context, *PostCommentCreateRequest) (*PostCommentCreateResponse, error)
	PostCommentsFetch(context.Context, *PostCommentsFetchRequest) (*PostCommentsFetchResponse, error)
	PostCommentDelete(context.Context, *PostCommentDeleteRequest) (*PostCommentDeleteResponse, error)
	FollowCreate(context.Context, *FollowCreateRequest) (*FollowCreateResponse, error)
	FollowDelete(context.Context, *FollowDeleteRequest) (*FollowDeleteResponse, error)
	FollowingsFetch(context.Context, *FollowingsFetchRequest) (*FollowingsFetchResponse, error)
	FollowersFetch(context.Context, *FollowersFetchRequest) (*FollowersFetchResponse, error)
	FollowsCounterFetch(context.Context, *FollowsCounterFetchRequest) (*FollowsCounterFetchResponse, error)
	mustEmbedUnimplementedSocialServiceServer()
}

// UnimplementedSocialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSocialServiceServer struct {
}

func (UnimplementedSocialServiceServer) PingApiSocial(context.Context, *PingApiSocialRequest) (*PingApiSocialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingApiSocial not implemented")
}
func (UnimplementedSocialServiceServer) PostCreate(context.Context, *PostCreateRequest) (*PostCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCreate not implemented")
}
func (UnimplementedSocialServiceServer) PostsFetchByUserID(context.Context, *PostsFetchByUserIDRequest) (*PostsFetchByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostsFetchByUserID not implemented")
}
func (UnimplementedSocialServiceServer) PostDelete(context.Context, *PostDeleteRequest) (*PostDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDelete not implemented")
}
func (UnimplementedSocialServiceServer) PostsFetchVirtualLatest(context.Context, *PostsFetchVirtualLatestRequest) (*PostsFetchVirtualLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostsFetchVirtualLatest not implemented")
}
func (UnimplementedSocialServiceServer) PostsFetchByKeyword(context.Context, *PostsFetchByKeywordRequest) (*PostsFetchByKeywordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostsFetchByKeyword not implemented")
}
func (UnimplementedSocialServiceServer) PostsFetchByKeywords(context.Context, *PostsFetchByKeywordsRequest) (*PostsFetchByKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostsFetchByKeywords not implemented")
}
func (UnimplementedSocialServiceServer) PostsFetchAllKeywords(context.Context, *PostsFetchAllKeywordsRequest) (*PostsFetchAllKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostsFetchAllKeywords not implemented")
}
func (UnimplementedSocialServiceServer) PostToggleLike(context.Context, *PostToggleLikeRequest) (*PostToggleLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostToggleLike not implemented")
}
func (UnimplementedSocialServiceServer) PostFetchLikes(context.Context, *PostFetchLikesRequest) (*PostFetchLikesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFetchLikes not implemented")
}
func (UnimplementedSocialServiceServer) PostFetchViews(context.Context, *PostFetchViewsRequest) (*PostFetchViewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFetchViews not implemented")
}
func (UnimplementedSocialServiceServer) PostCommentCreate(context.Context, *PostCommentCreateRequest) (*PostCommentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCommentCreate not implemented")
}
func (UnimplementedSocialServiceServer) PostCommentsFetch(context.Context, *PostCommentsFetchRequest) (*PostCommentsFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCommentsFetch not implemented")
}
func (UnimplementedSocialServiceServer) PostCommentDelete(context.Context, *PostCommentDeleteRequest) (*PostCommentDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCommentDelete not implemented")
}
func (UnimplementedSocialServiceServer) FollowCreate(context.Context, *FollowCreateRequest) (*FollowCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowCreate not implemented")
}
func (UnimplementedSocialServiceServer) FollowDelete(context.Context, *FollowDeleteRequest) (*FollowDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowDelete not implemented")
}
func (UnimplementedSocialServiceServer) FollowingsFetch(context.Context, *FollowingsFetchRequest) (*FollowingsFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowingsFetch not implemented")
}
func (UnimplementedSocialServiceServer) FollowersFetch(context.Context, *FollowersFetchRequest) (*FollowersFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowersFetch not implemented")
}
func (UnimplementedSocialServiceServer) FollowsCounterFetch(context.Context, *FollowsCounterFetchRequest) (*FollowsCounterFetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowsCounterFetch not implemented")
}
func (UnimplementedSocialServiceServer) mustEmbedUnimplementedSocialServiceServer() {}

// UnsafeSocialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SocialServiceServer will
// result in compilation errors.
type UnsafeSocialServiceServer interface {
	mustEmbedUnimplementedSocialServiceServer()
}

func RegisterSocialServiceServer(s grpc.ServiceRegistrar, srv SocialServiceServer) {
	s.RegisterService(&SocialService_ServiceDesc, srv)
}

func _SocialService_PingApiSocial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingApiSocialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PingApiSocial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PingApiSocial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PingApiSocial(ctx, req.(*PingApiSocialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostCreate(ctx, req.(*PostCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostsFetchByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsFetchByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostsFetchByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostsFetchByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostsFetchByUserID(ctx, req.(*PostsFetchByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostDelete(ctx, req.(*PostDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostsFetchVirtualLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsFetchVirtualLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostsFetchVirtualLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostsFetchVirtualLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostsFetchVirtualLatest(ctx, req.(*PostsFetchVirtualLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostsFetchByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsFetchByKeywordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostsFetchByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostsFetchByKeyword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostsFetchByKeyword(ctx, req.(*PostsFetchByKeywordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostsFetchByKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsFetchByKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostsFetchByKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostsFetchByKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostsFetchByKeywords(ctx, req.(*PostsFetchByKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostsFetchAllKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostsFetchAllKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostsFetchAllKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostsFetchAllKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostsFetchAllKeywords(ctx, req.(*PostsFetchAllKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostToggleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostToggleLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostToggleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostToggleLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostToggleLike(ctx, req.(*PostToggleLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostFetchLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostFetchLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostFetchLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostFetchLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostFetchLikes(ctx, req.(*PostFetchLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostFetchViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostFetchViewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostFetchViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostFetchViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostFetchViews(ctx, req.(*PostFetchViewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostCommentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostCommentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostCommentCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostCommentCreate(ctx, req.(*PostCommentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostCommentsFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentsFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostCommentsFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostCommentsFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostCommentsFetch(ctx, req.(*PostCommentsFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_PostCommentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).PostCommentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/PostCommentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).PostCommentDelete(ctx, req.(*PostCommentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_FollowCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).FollowCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/FollowCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).FollowCreate(ctx, req.(*FollowCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_FollowDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).FollowDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/FollowDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).FollowDelete(ctx, req.(*FollowDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_FollowingsFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingsFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).FollowingsFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/FollowingsFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).FollowingsFetch(ctx, req.(*FollowingsFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_FollowersFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowersFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).FollowersFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/FollowersFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).FollowersFetch(ctx, req.(*FollowersFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SocialService_FollowsCounterFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowsCounterFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServiceServer).FollowsCounterFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/social.SocialService/FollowsCounterFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServiceServer).FollowsCounterFetch(ctx, req.(*FollowsCounterFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SocialService_ServiceDesc is the grpc.ServiceDesc for SocialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SocialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "social.SocialService",
	HandlerType: (*SocialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingApiSocial",
			Handler:    _SocialService_PingApiSocial_Handler,
		},
		{
			MethodName: "PostCreate",
			Handler:    _SocialService_PostCreate_Handler,
		},
		{
			MethodName: "PostsFetchByUserID",
			Handler:    _SocialService_PostsFetchByUserID_Handler,
		},
		{
			MethodName: "PostDelete",
			Handler:    _SocialService_PostDelete_Handler,
		},
		{
			MethodName: "PostsFetchVirtualLatest",
			Handler:    _SocialService_PostsFetchVirtualLatest_Handler,
		},
		{
			MethodName: "PostsFetchByKeyword",
			Handler:    _SocialService_PostsFetchByKeyword_Handler,
		},
		{
			MethodName: "PostsFetchByKeywords",
			Handler:    _SocialService_PostsFetchByKeywords_Handler,
		},
		{
			MethodName: "PostsFetchAllKeywords",
			Handler:    _SocialService_PostsFetchAllKeywords_Handler,
		},
		{
			MethodName: "PostToggleLike",
			Handler:    _SocialService_PostToggleLike_Handler,
		},
		{
			MethodName: "PostFetchLikes",
			Handler:    _SocialService_PostFetchLikes_Handler,
		},
		{
			MethodName: "PostFetchViews",
			Handler:    _SocialService_PostFetchViews_Handler,
		},
		{
			MethodName: "PostCommentCreate",
			Handler:    _SocialService_PostCommentCreate_Handler,
		},
		{
			MethodName: "PostCommentsFetch",
			Handler:    _SocialService_PostCommentsFetch_Handler,
		},
		{
			MethodName: "PostCommentDelete",
			Handler:    _SocialService_PostCommentDelete_Handler,
		},
		{
			MethodName: "FollowCreate",
			Handler:    _SocialService_FollowCreate_Handler,
		},
		{
			MethodName: "FollowDelete",
			Handler:    _SocialService_FollowDelete_Handler,
		},
		{
			MethodName: "FollowingsFetch",
			Handler:    _SocialService_FollowingsFetch_Handler,
		},
		{
			MethodName: "FollowersFetch",
			Handler:    _SocialService_FollowersFetch_Handler,
		},
		{
			MethodName: "FollowsCounterFetch",
			Handler:    _SocialService_FollowsCounterFetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-proto/social.proto",
}
