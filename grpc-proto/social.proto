syntax = "proto3";
import "grpc-proto/media.proto";

package social;
option go_package = "/grpc-proto;grpc_proto";

// ------------------------------------------------------------------------------------------------------
// >>> SERVICE
// ------------------------------------------------------------------------------------------------------

service SocialService {
  rpc PingApiSocial (PingApiSocialRequest) returns (PingApiSocialResponse);
  rpc PostCreate(PostCreateRequest) returns (PostCreateResponse);
  rpc PostsFetchByUserID(PostsFetchByUserIDRequest) returns (PostsFetchByUserIDResponse);
  rpc PostDelete(PostDeleteRequest) returns (PostDeleteResponse);
  rpc PostsFetchVirtualLatest(PostsFetchVirtualLatestRequest) returns (PostsFetchVirtualLatestResponse);
  rpc PostsFetchVirtualByKeywordsLatest(PostsFetchVirtualByKeywordsLatestRequest) returns (PostsFetchVirtualByKeywordsLatestResponse);
  rpc PostsFetchByKeyword(PostsFetchByKeywordRequest) returns (PostsFetchByKeywordResponse);
  rpc PostsFetchByKeywords(PostsFetchByKeywordsRequest) returns (PostsFetchByKeywordsResponse);
  rpc PostsFetchAllKeywords(PostsFetchAllKeywordsRequest) returns (PostsFetchAllKeywordsResponse);
  rpc PostToggleLike(PostToggleLikeRequest) returns (PostToggleLikeResponse);
  rpc PostFetchLikes(PostFetchLikesRequest) returns (PostFetchLikesResponse);
  rpc PostFetchViews(PostFetchViewsRequest) returns (PostFetchViewsResponse);
  rpc PostCommentCreate(PostCommentCreateRequest) returns (PostCommentCreateResponse);
  rpc PostCommentsFetch(PostCommentsFetchRequest) returns (PostCommentsFetchResponse);
  rpc PostCommentDelete(PostCommentDeleteRequest) returns (PostCommentDeleteResponse);

  rpc FollowCreate(FollowCreateRequest) returns (FollowCreateResponse);
  rpc FollowDelete(FollowDeleteRequest) returns (FollowDeleteResponse);
  rpc FollowingsFetch(FollowingsFetchRequest) returns (FollowingsFetchResponse);
  rpc FollowersFetch(FollowersFetchRequest) returns (FollowersFetchResponse);
  rpc FollowsCounterFetch(FollowsCounterFetchRequest) returns (FollowsCounterFetchResponse);
  rpc MatchesFetch(MatchesFetchRequest) returns (MatchesFetchResponse);

  rpc ProfileLikeCreate(ProfileLikeCreateRequest) returns (ProfileLikeCreateResponse);
  rpc ProfileLikeDelete(ProfileLikeDeleteRequest) returns (ProfileLikeDeleteResponse);
  rpc ProfileLikeGet(ProfileLikeGetRequest) returns (ProfileLikeGetResponse);

  rpc ProfileBlockCreate(ProfileBlockCreateRequest) returns (ProfileBlockCreateResponse);
  rpc ProfileBlockDelete(ProfileBlockDeleteRequest) returns (ProfileBlockDeleteResponse);
  rpc ProfileBlockGet(ProfileBlockGetRequest) returns (ProfileBlockGetResponse);
}

// ------------------------------------------------------------------------------------------------------
// >>> REQUESTS
// ------------------------------------------------------------------------------------------------------

// PING
message PingApiSocialRequest {}

message PingApiSocialResponse {
  string status = 1;
}

// POST CREATE
message PostCreateRequest {
  Post post = 1;
}
message PostCreateResponse {
  Post post = 1;
}

// POSTS FETCH BY USER ID
message PostsFetchByUserIDRequest {
  string currentUserId = 1;
  string targetUserId = 2;
  bool isVirtual = 3;
}
message PostsFetchByUserIDResponse {
  repeated Post posts = 1;
}

// POST DELETE
message PostDeleteRequest {
  string post_id = 1;
  string user_id = 2;
  bool is_virtual = 3;
}
message PostDeleteResponse {}

// POSTS FETCH VIRTUAL LATEST
message PostsFetchVirtualLatestRequest {
  string user_id = 1;
  bool is_virtual = 2;
  map<string, bytes> pages_states = 3;
}
message PostsFetchVirtualLatestResponse {
  repeated Post posts = 1;
  map<string, bytes> pages_states = 2;
}

// POSTS FETCH VIRTUAL BY KEYWORDS LATEST
message PostsFetchVirtualByKeywordsLatestRequest {
  string user_id = 1;
  repeated string preferred_keywords = 2;
  repeated string recommended_keywords = 3;
  repeated string trending_keywords = 4;
  repeated string random_keywords = 5;
  bytes pages_state = 6;
} 

message PostsFetchVirtualByKeywordsLatestResponse {
  repeated Post posts = 1;
  bytes page_state = 2;
}

// POSTS FETCH BY KEYWORD
message PostsFetchByKeywordRequest {
  string user_id = 1;
  string keyword = 2;
  bool is_virtual = 3;
  bytes pages_state = 4;
}
message PostsFetchByKeywordResponse {
  repeated Post posts = 1;
  bytes page_state = 2;
}

// POSTS FETCH BY KEYWORDS
message PostsFetchByKeywordsRequest {
  string user_id = 1;
  repeated string keywords = 2;
  bool is_virtual = 3;
  map<string, bytes> pages_states = 4;
}
message PostsFetchByKeywordsResponse {
  repeated Post posts = 1;
  map<string, bytes> pages_states = 2;
}

// ---------------------------------------------------------------------------------------------------------------------
// POSTS FETCH ALL KEYWORDS
message PostsFetchAllKeywordsRequest {
  bytes page_state = 1;
}
message PostsFetchAllKeywordsResponse {
  repeated string keywords = 1;
  bytes page_state = 2;
}

// ---------------------------------------------------------------------------------------------------------------------
// POST TOGGLE LIKE
message PostToggleLikeRequest {
  string post_id = 1;
  string user_id = 2;
}
message PostToggleLikeResponse {}

// POST FETCH LIKES
message PostFetchLikesRequest {
  string post_id = 1;
  bytes page_state = 2;
}
message PostFetchLikesResponse {
  repeated PostLike likes = 1;
  bytes page_state = 2;
}

// POST FETCH VIEWS
message PostFetchViewsRequest {
  string post_id = 1;
  bytes page_state = 2;
}
message PostFetchViewsResponse {
  repeated PostView views = 1;
  bytes page_state = 2;
}

// ---------------------------------------------------------------------------------------------------------------------
// POST COMMENT CREATE
message PostCommentCreateRequest {
  PostComment comment = 1;
}
message PostCommentCreateResponse {
  PostComment comment = 1;
}

// POST COMMENT FETCH
message PostCommentsFetchRequest {
  string post_id = 1;
  bytes page_state = 2;
}
message PostCommentsFetchResponse {
  repeated PostComment comments = 1;
  bytes page_state = 2;
}

// POST COMMENT DELETE
message PostCommentDeleteRequest {
  string comment_id = 1;
  string post_id = 2;
  string user_id = 3;
}
message PostCommentDeleteResponse {}

// ---------------------------------------------------------------------------------------------------------------------
// FOLLOW CREATE
message FollowCreateRequest {
  string follower_id = 1;
  string following_id = 2;
}
message FollowCreateResponse {}

// FOLLOW DELETE
message FollowDeleteRequest {
  string follower_id = 1;
  string following_id = 2;
}
message FollowDeleteResponse {}

// FOLLOWINGS FETCH
message FollowingsFetchRequest {
  string user_id = 1;
  bytes page_state = 2;
}
message FollowingsFetchResponse {
  repeated FollowsRender followings = 1;
  bytes page_state = 2;
}

// MATCHES FETCH
message MatchesFetchRequest {
  string user_id = 1;
  bytes page_state = 2;
}
message MatchesFetchResponse {
  repeated FollowsRender matches = 1;
  bytes page_state = 2;
}

// FOLLOWERS FETCH
message FollowersFetchRequest {
  string user_id = 1;
  bytes page_state = 2;
}
message FollowersFetchResponse {
  repeated FollowsRender followers = 1;
  bytes page_state = 2;
}

// FOLLOWS COUNTER FETCH
message FollowsCounterFetchRequest {
  string user_id = 1;
}
message FollowsCounterFetchResponse {
  int64 counter_followers = 1;
  int64 counter_followings = 2;
}

// ---------------------------------------------------------------------------------------------------------------------
// PROFILE LIKE CREATE
message ProfileLikeCreateRequest {
  string liked_id = 1;
  string liked_by_id = 2;
}
message ProfileLikeCreateResponse {}

// PROFILE LIKE DELETE
message ProfileLikeDeleteRequest {
  string liked_id = 1;
  string liked_by_id = 2;
}
message ProfileLikeDeleteResponse {}

// PROFILE LIKE GET
message ProfileLikeGetRequest {
  string liked_id = 1;
  string liked_by_id = 2;
}
message ProfileLikeGetResponse {
  bool liked = 1;
}

// ---------------------------------------------------------------------------------------------------------------------
// PROFILE BLOCK CREATE
message ProfileBlockCreateRequest {
  string blocked_id = 1;
  string blocked_by_id = 2;
}
message ProfileBlockCreateResponse {}

// PROFILE Block DELETE
message ProfileBlockDeleteRequest {
  string blocked_id = 1;
  string blocked_by_id = 2;
}
message ProfileBlockDeleteResponse {}

// PROFILE Block GET
message ProfileBlockGetRequest {
  string blocked_id = 1;
  string blocked_by_id = 2;
}
message ProfileBlockGetResponse {
  bool blocked = 1;
}

// ------------------------------------------------------------------------------------------------------
// >>> MODELS
// ------------------------------------------------------------------------------------------------------

message Post {
  string post_id = 1;
  string user_target_id = 2;
  string user_creator_id = 3;
  string created_at = 4;
  bool private = 5;
  string private_type = 6; // "only_me", "only_to_target", "to_a_public"
  string content_text = 7;
  string content_status = 8;
  string link_url = 9;
  repeated string keywords = 10;
  repeated media.Media media = 11;
  PostCounter counters = 12;
  bool is_liked = 13;
  bool is_virtual = 14;
  string username = 15;
  string avatar_url = 16;
  string post_type = 17; // "normal", "promo"  
  string media_category = 18; // "video", "static_image", "animated_image"
  string user_category = 19; // "dating profiles", "influencers"
  string user_looking_for = 20; // CasualEncounters, Dating, FriendsWithBenefits, OnlineWebcamFun, DiscreetRomance, LongTermRelationship
}

message PostCounter {
  string post_id = 1;
  int64 counter_likes = 2;
  int64 counter_comments = 3;
  int64 counter_views = 4;
}

message PostView {
  string post_id = 1;
  string user_id = 2;
  string created_at = 3;
}

message PostLike {
  string post_id = 1;
  string user_id = 2;
  string created_at = 3;
}

message PostComment {
  string comment_id = 1;
  string post_id = 2;
  string author_id = 3;
  string created_at = 4;
  string updated_at = 5;
  string content = 6;
}

// ---------------------------------------------------------------------------------------------------------------------
message CommentReply {
  string parent_comment_id = 1;
  string reply_id = 2;
  string post_id = 3;
  string author_id = 4;
  string created_at = 5;
  string content = 6;
}

message CommentLike {
  string comment_id = 1;
  string user_id = 2;
  string liked_at = 3;
}

// Response for frontend
message FollowsRender {
	string user_id = 1;
	string user_type  = 2;
	string user_role = 3;
	string username = 4;
	string avatar_url = 5;
  string created_at = 6;
	string status = 7;
}

// ---------------------------------------------------------------------------------------------------------------------
message Follow {
  string follower_id = 1;
  string following_id = 2;
  string created_at = 3;
  string status = 4;
}