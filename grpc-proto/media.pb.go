// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.21.12
// source: grpc-proto/media.proto

package grpc_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PING
type PingApiMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingApiMediaRequest) Reset() {
	*x = PingApiMediaRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingApiMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingApiMediaRequest) ProtoMessage() {}

func (x *PingApiMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingApiMediaRequest.ProtoReflect.Descriptor instead.
func (*PingApiMediaRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{0}
}

type PingApiMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PingApiMediaResponse) Reset() {
	*x = PingApiMediaResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingApiMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingApiMediaResponse) ProtoMessage() {}

func (x *PingApiMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingApiMediaResponse.ProtoReflect.Descriptor instead.
func (*PingApiMediaResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{1}
}

func (x *PingApiMediaResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// POST MEDIA
type PostUploadMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserEmail        string `protobuf:"bytes,2,opt,name=userEmail,proto3" json:"userEmail,omitempty"`
	IsVirtual        bool   `protobuf:"varint,3,opt,name=isVirtual,proto3" json:"isVirtual,omitempty"`
	PostId           string `protobuf:"bytes,4,opt,name=postId,proto3" json:"postId,omitempty"`
	MimeType         string `protobuf:"bytes,5,opt,name=mimeType,proto3" json:"mimeType,omitempty"`
	OriginalFilename string `protobuf:"bytes,6,opt,name=originalFilename,proto3" json:"originalFilename,omitempty"`
	SizeCategory     string `protobuf:"bytes,7,opt,name=sizeCategory,proto3" json:"sizeCategory,omitempty"`
	Photo            []byte `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	VideoUrl         string `protobuf:"bytes,9,opt,name=videoUrl,proto3" json:"videoUrl,omitempty"`
}

func (x *PostUploadMediaRequest) Reset() {
	*x = PostUploadMediaRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostUploadMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUploadMediaRequest) ProtoMessage() {}

func (x *PostUploadMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUploadMediaRequest.ProtoReflect.Descriptor instead.
func (*PostUploadMediaRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{2}
}

func (x *PostUploadMediaRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PostUploadMediaRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *PostUploadMediaRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

func (x *PostUploadMediaRequest) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *PostUploadMediaRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *PostUploadMediaRequest) GetOriginalFilename() string {
	if x != nil {
		return x.OriginalFilename
	}
	return ""
}

func (x *PostUploadMediaRequest) GetSizeCategory() string {
	if x != nil {
		return x.SizeCategory
	}
	return ""
}

func (x *PostUploadMediaRequest) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *PostUploadMediaRequest) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

type PostUploadMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Media *Media `protobuf:"bytes,1,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *PostUploadMediaResponse) Reset() {
	*x = PostUploadMediaResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostUploadMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUploadMediaResponse) ProtoMessage() {}

func (x *PostUploadMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUploadMediaResponse.ProtoReflect.Descriptor instead.
func (*PostUploadMediaResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{3}
}

func (x *PostUploadMediaResponse) GetMedia() *Media {
	if x != nil {
		return x.Media
	}
	return nil
}

// FETCH ONE POST MEDIA
type PostFetchMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	IsVirtual bool   `protobuf:"varint,2,opt,name=isVirtual,proto3" json:"isVirtual,omitempty"`
}

func (x *PostFetchMediaRequest) Reset() {
	*x = PostFetchMediaRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostFetchMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostFetchMediaRequest) ProtoMessage() {}

func (x *PostFetchMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostFetchMediaRequest.ProtoReflect.Descriptor instead.
func (*PostFetchMediaRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{4}
}

func (x *PostFetchMediaRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PostFetchMediaRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

type PostFetchMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhotoObjects []*Media `protobuf:"bytes,1,rep,name=photoObjects,proto3" json:"photoObjects,omitempty"`
}

func (x *PostFetchMediaResponse) Reset() {
	*x = PostFetchMediaResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostFetchMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostFetchMediaResponse) ProtoMessage() {}

func (x *PostFetchMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostFetchMediaResponse.ProtoReflect.Descriptor instead.
func (*PostFetchMediaResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{5}
}

func (x *PostFetchMediaResponse) GetPhotoObjects() []*Media {
	if x != nil {
		return x.PhotoObjects
	}
	return nil
}

// FETCH MORE THAN ONE POST MEDIA
type PostsFetchMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostIds   []string `protobuf:"bytes,1,rep,name=postIds,proto3" json:"postIds,omitempty"`
	IsVirtual bool     `protobuf:"varint,2,opt,name=isVirtual,proto3" json:"isVirtual,omitempty"`
}

func (x *PostsFetchMediaRequest) Reset() {
	*x = PostsFetchMediaRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostsFetchMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostsFetchMediaRequest) ProtoMessage() {}

func (x *PostsFetchMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostsFetchMediaRequest.ProtoReflect.Descriptor instead.
func (*PostsFetchMediaRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{6}
}

func (x *PostsFetchMediaRequest) GetPostIds() []string {
	if x != nil {
		return x.PostIds
	}
	return nil
}

func (x *PostsFetchMediaRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

type PostsFetchMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaObjects []*Media `protobuf:"bytes,1,rep,name=mediaObjects,proto3" json:"mediaObjects,omitempty"`
}

func (x *PostsFetchMediaResponse) Reset() {
	*x = PostsFetchMediaResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostsFetchMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostsFetchMediaResponse) ProtoMessage() {}

func (x *PostsFetchMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostsFetchMediaResponse.ProtoReflect.Descriptor instead.
func (*PostsFetchMediaResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{7}
}

func (x *PostsFetchMediaResponse) GetMediaObjects() []*Media {
	if x != nil {
		return x.MediaObjects
	}
	return nil
}

// DELETE MEDIA
type PostDeleteMediaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId    string `protobuf:"bytes,1,opt,name=postId,proto3" json:"postId,omitempty"`
	IsVirtual bool   `protobuf:"varint,2,opt,name=isVirtual,proto3" json:"isVirtual,omitempty"`
}

func (x *PostDeleteMediaRequest) Reset() {
	*x = PostDeleteMediaRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostDeleteMediaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDeleteMediaRequest) ProtoMessage() {}

func (x *PostDeleteMediaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDeleteMediaRequest.ProtoReflect.Descriptor instead.
func (*PostDeleteMediaRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{8}
}

func (x *PostDeleteMediaRequest) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *PostDeleteMediaRequest) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

type PostDeleteMediaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *PostDeleteMediaResponse) Reset() {
	*x = PostDeleteMediaResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostDeleteMediaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDeleteMediaResponse) ProtoMessage() {}

func (x *PostDeleteMediaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDeleteMediaResponse.ProtoReflect.Descriptor instead.
func (*PostDeleteMediaResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{9}
}

func (x *PostDeleteMediaResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// THE PHOTO
type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp     string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	IsVirtual     bool   `protobuf:"varint,3,opt,name=isVirtual,proto3" json:"isVirtual,omitempty"`
	PostId        string `protobuf:"bytes,4,opt,name=postId,proto3" json:"postId,omitempty"`
	MediaId       string `protobuf:"bytes,5,opt,name=mediaId,proto3" json:"mediaId,omitempty"`
	MediaType     string `protobuf:"bytes,6,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	MediaFilename string `protobuf:"bytes,7,opt,name=mediaFilename,proto3" json:"mediaFilename,omitempty"`
	CoverFilename string `protobuf:"bytes,8,opt,name=coverFilename,proto3" json:"coverFilename,omitempty"`
	Metadata      string `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	IsAnimated    bool   `protobuf:"varint,10,opt,name=isAnimated,proto3" json:"isAnimated,omitempty"`
}

func (x *Media) Reset() {
	*x = Media{}
	mi := &file_grpc_proto_media_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{10}
}

func (x *Media) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Media) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Media) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

func (x *Media) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *Media) GetMediaId() string {
	if x != nil {
		return x.MediaId
	}
	return ""
}

func (x *Media) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Media) GetMediaFilename() string {
	if x != nil {
		return x.MediaFilename
	}
	return ""
}

func (x *Media) GetCoverFilename() string {
	if x != nil {
		return x.CoverFilename
	}
	return ""
}

func (x *Media) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *Media) GetIsAnimated() bool {
	if x != nil {
		return x.IsAnimated
	}
	return false
}

type AVATAR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CreatedAt string `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Filename  string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"` //string metadata = 4;
}

func (x *AVATAR) Reset() {
	*x = AVATAR{}
	mi := &file_grpc_proto_media_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AVATAR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AVATAR) ProtoMessage() {}

func (x *AVATAR) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AVATAR.ProtoReflect.Descriptor instead.
func (*AVATAR) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{11}
}

func (x *AVATAR) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AVATAR) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *AVATAR) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type AvatarMediaUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	MimeType string `protobuf:"bytes,2,opt,name=mimeType,proto3" json:"mimeType,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileBody []byte `protobuf:"bytes,4,opt,name=fileBody,proto3" json:"fileBody,omitempty"`
}

func (x *AvatarMediaUploadRequest) Reset() {
	*x = AvatarMediaUploadRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarMediaUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarMediaUploadRequest) ProtoMessage() {}

func (x *AvatarMediaUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarMediaUploadRequest.ProtoReflect.Descriptor instead.
func (*AvatarMediaUploadRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{12}
}

func (x *AvatarMediaUploadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AvatarMediaUploadRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *AvatarMediaUploadRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *AvatarMediaUploadRequest) GetFileBody() []byte {
	if x != nil {
		return x.FileBody
	}
	return nil
}

type AvatarMediaUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar *AVATAR `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *AvatarMediaUploadResponse) Reset() {
	*x = AvatarMediaUploadResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarMediaUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarMediaUploadResponse) ProtoMessage() {}

func (x *AvatarMediaUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarMediaUploadResponse.ProtoReflect.Descriptor instead.
func (*AvatarMediaUploadResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{13}
}

func (x *AvatarMediaUploadResponse) GetAvatar() *AVATAR {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type AvatarMediaFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AvatarMediaFetchRequest) Reset() {
	*x = AvatarMediaFetchRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarMediaFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarMediaFetchRequest) ProtoMessage() {}

func (x *AvatarMediaFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarMediaFetchRequest.ProtoReflect.Descriptor instead.
func (*AvatarMediaFetchRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{14}
}

func (x *AvatarMediaFetchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AvatarMediaFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar *AVATAR `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *AvatarMediaFetchResponse) Reset() {
	*x = AvatarMediaFetchResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarMediaFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarMediaFetchResponse) ProtoMessage() {}

func (x *AvatarMediaFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarMediaFetchResponse.ProtoReflect.Descriptor instead.
func (*AvatarMediaFetchResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{15}
}

func (x *AvatarMediaFetchResponse) GetAvatar() *AVATAR {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type AvatarMediaFetchMultipleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []string `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
}

func (x *AvatarMediaFetchMultipleRequest) Reset() {
	*x = AvatarMediaFetchMultipleRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarMediaFetchMultipleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarMediaFetchMultipleRequest) ProtoMessage() {}

func (x *AvatarMediaFetchMultipleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarMediaFetchMultipleRequest.ProtoReflect.Descriptor instead.
func (*AvatarMediaFetchMultipleRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{16}
}

func (x *AvatarMediaFetchMultipleRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type AvatarMediaFetchMultipleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatars []*AVATAR `protobuf:"bytes,1,rep,name=avatars,proto3" json:"avatars,omitempty"`
}

func (x *AvatarMediaFetchMultipleResponse) Reset() {
	*x = AvatarMediaFetchMultipleResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarMediaFetchMultipleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarMediaFetchMultipleResponse) ProtoMessage() {}

func (x *AvatarMediaFetchMultipleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarMediaFetchMultipleResponse.ProtoReflect.Descriptor instead.
func (*AvatarMediaFetchMultipleResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{17}
}

func (x *AvatarMediaFetchMultipleResponse) GetAvatars() []*AVATAR {
	if x != nil {
		return x.Avatars
	}
	return nil
}

type AvatarMediaDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *AvatarMediaDeleteRequest) Reset() {
	*x = AvatarMediaDeleteRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarMediaDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarMediaDeleteRequest) ProtoMessage() {}

func (x *AvatarMediaDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarMediaDeleteRequest.ProtoReflect.Descriptor instead.
func (*AvatarMediaDeleteRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{18}
}

func (x *AvatarMediaDeleteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AvatarMediaDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AvatarMediaDeleteResponse) Reset() {
	*x = AvatarMediaDeleteResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarMediaDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarMediaDeleteResponse) ProtoMessage() {}

func (x *AvatarMediaDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarMediaDeleteResponse.ProtoReflect.Descriptor instead.
func (*AvatarMediaDeleteResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{19}
}

type BACKGROUND struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CreatedAt string `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Filename  string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *BACKGROUND) Reset() {
	*x = BACKGROUND{}
	mi := &file_grpc_proto_media_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BACKGROUND) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BACKGROUND) ProtoMessage() {}

func (x *BACKGROUND) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BACKGROUND.ProtoReflect.Descriptor instead.
func (*BACKGROUND) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{20}
}

func (x *BACKGROUND) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BACKGROUND) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *BACKGROUND) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type BackgroundMediaUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	MimeType string `protobuf:"bytes,2,opt,name=mimeType,proto3" json:"mimeType,omitempty"`
	FileName string `protobuf:"bytes,3,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FileBody []byte `protobuf:"bytes,4,opt,name=fileBody,proto3" json:"fileBody,omitempty"`
}

func (x *BackgroundMediaUploadRequest) Reset() {
	*x = BackgroundMediaUploadRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundMediaUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundMediaUploadRequest) ProtoMessage() {}

func (x *BackgroundMediaUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundMediaUploadRequest.ProtoReflect.Descriptor instead.
func (*BackgroundMediaUploadRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{21}
}

func (x *BackgroundMediaUploadRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BackgroundMediaUploadRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *BackgroundMediaUploadRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *BackgroundMediaUploadRequest) GetFileBody() []byte {
	if x != nil {
		return x.FileBody
	}
	return nil
}

type BackgroundMediaUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Background *BACKGROUND `protobuf:"bytes,1,opt,name=background,proto3" json:"background,omitempty"`
}

func (x *BackgroundMediaUploadResponse) Reset() {
	*x = BackgroundMediaUploadResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundMediaUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundMediaUploadResponse) ProtoMessage() {}

func (x *BackgroundMediaUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundMediaUploadResponse.ProtoReflect.Descriptor instead.
func (*BackgroundMediaUploadResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{22}
}

func (x *BackgroundMediaUploadResponse) GetBackground() *BACKGROUND {
	if x != nil {
		return x.Background
	}
	return nil
}

type BackgroundMediaFetchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *BackgroundMediaFetchRequest) Reset() {
	*x = BackgroundMediaFetchRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundMediaFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundMediaFetchRequest) ProtoMessage() {}

func (x *BackgroundMediaFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundMediaFetchRequest.ProtoReflect.Descriptor instead.
func (*BackgroundMediaFetchRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{23}
}

func (x *BackgroundMediaFetchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type BackgroundMediaFetchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Background *BACKGROUND `protobuf:"bytes,1,opt,name=background,proto3" json:"background,omitempty"`
}

func (x *BackgroundMediaFetchResponse) Reset() {
	*x = BackgroundMediaFetchResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundMediaFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundMediaFetchResponse) ProtoMessage() {}

func (x *BackgroundMediaFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundMediaFetchResponse.ProtoReflect.Descriptor instead.
func (*BackgroundMediaFetchResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{24}
}

func (x *BackgroundMediaFetchResponse) GetBackground() *BACKGROUND {
	if x != nil {
		return x.Background
	}
	return nil
}

type BackgroundMediaDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *BackgroundMediaDeleteRequest) Reset() {
	*x = BackgroundMediaDeleteRequest{}
	mi := &file_grpc_proto_media_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundMediaDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundMediaDeleteRequest) ProtoMessage() {}

func (x *BackgroundMediaDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundMediaDeleteRequest.ProtoReflect.Descriptor instead.
func (*BackgroundMediaDeleteRequest) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{25}
}

func (x *BackgroundMediaDeleteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type BackgroundMediaDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackgroundMediaDeleteResponse) Reset() {
	*x = BackgroundMediaDeleteResponse{}
	mi := &file_grpc_proto_media_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundMediaDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundMediaDeleteResponse) ProtoMessage() {}

func (x *BackgroundMediaDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_media_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundMediaDeleteResponse.ProtoReflect.Descriptor instead.
func (*BackgroundMediaDeleteResponse) Descriptor() ([]byte, []int) {
	return file_grpc_proto_media_proto_rawDescGZIP(), []int{26}
}

var File_grpc_proto_media_proto protoreflect.FileDescriptor

var file_grpc_proto_media_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22,
	0x15, 0x0a, 0x13, 0x50, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x14, 0x50, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x7a,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x3d, 0x0a, 0x17, 0x50,
	0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x4d, 0x0a, 0x15, 0x50, 0x6f,
	0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x16, 0x50, 0x6f, 0x73,
	0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x22, 0x4b, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x73,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x22, 0x33, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x05, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x5a, 0x0a, 0x06, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x18,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x42, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x31, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x18, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x3b,
	0x0a, 0x1f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x20, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x07, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x52,
	0x07, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x22, 0x32, 0x0a, 0x18, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x0a, 0x42, 0x41, 0x43,
	0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x52, 0x0a, 0x1d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x52, 0x0a,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x35, 0x0a, 0x1b, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x51, 0x0a, 0x1c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x42, 0x41,
	0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb7, 0x08,
	0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1a,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x50, 0x6f, 0x73,
	0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1d, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x50, 0x6f,
	0x73, 0x74, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1d, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x73, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_proto_media_proto_rawDescOnce sync.Once
	file_grpc_proto_media_proto_rawDescData = file_grpc_proto_media_proto_rawDesc
)

func file_grpc_proto_media_proto_rawDescGZIP() []byte {
	file_grpc_proto_media_proto_rawDescOnce.Do(func() {
		file_grpc_proto_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_media_proto_rawDescData)
	})
	return file_grpc_proto_media_proto_rawDescData
}

var file_grpc_proto_media_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_grpc_proto_media_proto_goTypes = []any{
	(*PingApiMediaRequest)(nil),              // 0: media.PingApiMediaRequest
	(*PingApiMediaResponse)(nil),             // 1: media.PingApiMediaResponse
	(*PostUploadMediaRequest)(nil),           // 2: media.PostUploadMediaRequest
	(*PostUploadMediaResponse)(nil),          // 3: media.PostUploadMediaResponse
	(*PostFetchMediaRequest)(nil),            // 4: media.PostFetchMediaRequest
	(*PostFetchMediaResponse)(nil),           // 5: media.PostFetchMediaResponse
	(*PostsFetchMediaRequest)(nil),           // 6: media.PostsFetchMediaRequest
	(*PostsFetchMediaResponse)(nil),          // 7: media.PostsFetchMediaResponse
	(*PostDeleteMediaRequest)(nil),           // 8: media.PostDeleteMediaRequest
	(*PostDeleteMediaResponse)(nil),          // 9: media.PostDeleteMediaResponse
	(*Media)(nil),                            // 10: media.Media
	(*AVATAR)(nil),                           // 11: media.AVATAR
	(*AvatarMediaUploadRequest)(nil),         // 12: media.AvatarMediaUploadRequest
	(*AvatarMediaUploadResponse)(nil),        // 13: media.AvatarMediaUploadResponse
	(*AvatarMediaFetchRequest)(nil),          // 14: media.AvatarMediaFetchRequest
	(*AvatarMediaFetchResponse)(nil),         // 15: media.AvatarMediaFetchResponse
	(*AvatarMediaFetchMultipleRequest)(nil),  // 16: media.AvatarMediaFetchMultipleRequest
	(*AvatarMediaFetchMultipleResponse)(nil), // 17: media.AvatarMediaFetchMultipleResponse
	(*AvatarMediaDeleteRequest)(nil),         // 18: media.AvatarMediaDeleteRequest
	(*AvatarMediaDeleteResponse)(nil),        // 19: media.AvatarMediaDeleteResponse
	(*BACKGROUND)(nil),                       // 20: media.BACKGROUND
	(*BackgroundMediaUploadRequest)(nil),     // 21: media.BackgroundMediaUploadRequest
	(*BackgroundMediaUploadResponse)(nil),    // 22: media.BackgroundMediaUploadResponse
	(*BackgroundMediaFetchRequest)(nil),      // 23: media.BackgroundMediaFetchRequest
	(*BackgroundMediaFetchResponse)(nil),     // 24: media.BackgroundMediaFetchResponse
	(*BackgroundMediaDeleteRequest)(nil),     // 25: media.BackgroundMediaDeleteRequest
	(*BackgroundMediaDeleteResponse)(nil),    // 26: media.BackgroundMediaDeleteResponse
}
var file_grpc_proto_media_proto_depIdxs = []int32{
	10, // 0: media.PostUploadMediaResponse.media:type_name -> media.Media
	10, // 1: media.PostFetchMediaResponse.photoObjects:type_name -> media.Media
	10, // 2: media.PostsFetchMediaResponse.mediaObjects:type_name -> media.Media
	11, // 3: media.AvatarMediaUploadResponse.avatar:type_name -> media.AVATAR
	11, // 4: media.AvatarMediaFetchResponse.avatar:type_name -> media.AVATAR
	11, // 5: media.AvatarMediaFetchMultipleResponse.avatars:type_name -> media.AVATAR
	20, // 6: media.BackgroundMediaUploadResponse.background:type_name -> media.BACKGROUND
	20, // 7: media.BackgroundMediaFetchResponse.background:type_name -> media.BACKGROUND
	0,  // 8: media.MediaService.PingApiMedia:input_type -> media.PingApiMediaRequest
	2,  // 9: media.MediaService.PostUploadMedia:input_type -> media.PostUploadMediaRequest
	4,  // 10: media.MediaService.PostFetchMedia:input_type -> media.PostFetchMediaRequest
	8,  // 11: media.MediaService.PostDeleteMedia:input_type -> media.PostDeleteMediaRequest
	6,  // 12: media.MediaService.PostsFetchMedia:input_type -> media.PostsFetchMediaRequest
	12, // 13: media.MediaService.AvatarMediaUpload:input_type -> media.AvatarMediaUploadRequest
	14, // 14: media.MediaService.AvatarMediaFetch:input_type -> media.AvatarMediaFetchRequest
	16, // 15: media.MediaService.AvatarMediaFetchMultiple:input_type -> media.AvatarMediaFetchMultipleRequest
	18, // 16: media.MediaService.AvatarMediaDelete:input_type -> media.AvatarMediaDeleteRequest
	21, // 17: media.MediaService.BackgroundMediaUpload:input_type -> media.BackgroundMediaUploadRequest
	23, // 18: media.MediaService.BackgroundMediaFetch:input_type -> media.BackgroundMediaFetchRequest
	25, // 19: media.MediaService.BackgroundMediaDelete:input_type -> media.BackgroundMediaDeleteRequest
	1,  // 20: media.MediaService.PingApiMedia:output_type -> media.PingApiMediaResponse
	3,  // 21: media.MediaService.PostUploadMedia:output_type -> media.PostUploadMediaResponse
	5,  // 22: media.MediaService.PostFetchMedia:output_type -> media.PostFetchMediaResponse
	9,  // 23: media.MediaService.PostDeleteMedia:output_type -> media.PostDeleteMediaResponse
	7,  // 24: media.MediaService.PostsFetchMedia:output_type -> media.PostsFetchMediaResponse
	13, // 25: media.MediaService.AvatarMediaUpload:output_type -> media.AvatarMediaUploadResponse
	15, // 26: media.MediaService.AvatarMediaFetch:output_type -> media.AvatarMediaFetchResponse
	17, // 27: media.MediaService.AvatarMediaFetchMultiple:output_type -> media.AvatarMediaFetchMultipleResponse
	19, // 28: media.MediaService.AvatarMediaDelete:output_type -> media.AvatarMediaDeleteResponse
	22, // 29: media.MediaService.BackgroundMediaUpload:output_type -> media.BackgroundMediaUploadResponse
	24, // 30: media.MediaService.BackgroundMediaFetch:output_type -> media.BackgroundMediaFetchResponse
	26, // 31: media.MediaService.BackgroundMediaDelete:output_type -> media.BackgroundMediaDeleteResponse
	20, // [20:32] is the sub-list for method output_type
	8,  // [8:20] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_grpc_proto_media_proto_init() }
func file_grpc_proto_media_proto_init() {
	if File_grpc_proto_media_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_media_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_proto_media_proto_goTypes,
		DependencyIndexes: file_grpc_proto_media_proto_depIdxs,
		MessageInfos:      file_grpc_proto_media_proto_msgTypes,
	}.Build()
	File_grpc_proto_media_proto = out.File
	file_grpc_proto_media_proto_rawDesc = nil
	file_grpc_proto_media_proto_goTypes = nil
	file_grpc_proto_media_proto_depIdxs = nil
}
