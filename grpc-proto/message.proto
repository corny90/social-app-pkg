syntax = "proto3";

package message;
option go_package = "/grpc-proto;grpc_proto";

service MessageService {
  rpc PingApiMessage (PingApiMessageRequest) returns (PingApiMessageResponse);
  rpc CustomerMessage (CustomerMessageRequest) returns (CustomerMessageResponse);
  rpc ChatbotMessage (ChatbotMessageRequest) returns (ChatbotMessageResponse);

  rpc PingTasksQueue (PingTasksQueueRequest) returns (PingTasksQueueResponse);
  rpc CreateTaskMessage (CreateTaskMessageRequest) returns (CreateTaskMessageResponse);
  rpc CompleteTaskMessage (CompleteTaskMessageRequest) returns (CompleteTaskMessageResponse);

  rpc UserSendMessage (UserSendMessageRequest) returns (UserSendMessageResponse);
  rpc EditMessage (EditMessageRequest) returns (EditMessageResponse);
  rpc FetchMessage (FetchMessageRequest) returns (FetchMessageResponse);
  rpc DeleteMessage (DeleteMessageRequest) returns (DeleteMessageResponse);
  rpc ReadMessage (ReadMessageRequest) returns (ReadMessageResponse);
  rpc FetchConversationMessages (FetchConversationMessagesRequest) returns (FetchConversationMessagesResponse);
  rpc DeleteConversation (DeleteConversationRequest) returns (DeleteConversationResponse);
  rpc FetchAllUserConversations (FetchAllUserConversationsRequest) returns (FetchAllUserConversationsResponse);
  rpc FetchConversationMessageCounter (FetchConversationMessageCounterRequest) returns (FetchConversationMessageCounterResponse);
  rpc StoreConversationMessageCounter (StoreConversationCounterRequest) returns (StoreConversationCounterResponse);
}

//--------------------------------------
// Ping API Message
message PingApiMessageRequest {}

message PingApiMessageResponse {
  string status = 1;
}

//--------------------------------------
// PING Task Queue - BullMQ
message PingTasksQueueRequest {}

message PingTasksQueueResponse {
  string status = 1;
}



//--------------------------------------
// Customer Message
message CustomerMessageRequest {
  string conversation = 1;
  string sender = 2;
  repeated string recipient = 3;
  string content = 4;
}

message CustomerMessageResponse {
  string status = 1;
  Message message = 2;
}

//--------------------------------------
// Send User Message
message UserSendMessageRequest {
  string senderID = 1;
  string recipientID = 2;
  string content = 3;
}
message UserSendMessageResponse {
  Message userMessage = 1;
  Message botMessage = 2;
}

// Edit Message
message EditMessageRequest {
  string senderID = 1;
  string messageID = 2;
  string conversationID = 3;
  string newContent = 4;
}
message EditMessageResponse {}

// Fetch Message
message FetchMessageRequest {
  string senderID = 1;
  string messageID = 2;
  string conversationID = 3;
}
message FetchMessageResponse {
  Message message = 1;
}

// Delete Message
message DeleteMessageRequest {
  string senderID = 1;
  string messageID = 2;
  string conversationID = 3;
}
message DeleteMessageResponse {}

// Read Message
message ReadMessageRequest {
  string conversationID = 1;
}
message ReadMessageResponse {}

// Fetch Conversation Messages
message FetchConversationMessagesRequest {
  string senderID = 1;
  string conversationID = 2;
  bytes page_state = 3;
}
message FetchConversationMessagesResponse {
  repeated Message messages = 1;
  bytes page_state = 2;
}

// Delete Conversation
message DeleteConversationRequest {
  string senderID = 1;
  string conversationID = 2;
}
message DeleteConversationResponse {}

// Fetch Conversation Messages
message FetchAllUserConversationsRequest {
  string senderID = 1;
  bytes page_state = 2;
}
message FetchAllUserConversationsResponse {
  repeated ConversationRender conversations = 1;
  bytes page_state = 2;
}

// Fetch Conversation Messages Counter
message FetchConversationMessageCounterRequest {
  string conversationID = 1;
}
message FetchConversationMessageCounterResponse {
  string conversationID = 1;
  repeated string messageID = 2;
}

// Store Conversation Message Counter
message StoreConversationCounterRequest {
  string conversationID = 1;
}
message StoreConversationCounterResponse {}









//--------------------------------------
// Chatbot Message
message ChatbotMessageRequest {
  repeated string recipient = 1;
  Message message = 2;
}

message ChatbotMessageResponse {
  string status = 1;
}

//--------------------------------------
// CREATE Task Message
message CreateTaskMessageRequest {
  string type = 1;
  int32 delay = 2;
  TaskData taskData = 3;
}

message CreateTaskMessageResponse {
  string status = 1;
}

//--------------------------------------
// Complete Task Message (from TasksQueue to Message Microservice)
message CompleteTaskMessageRequest {
  string type = 1;
  TaskData taskData = 2;
}

message CompleteTaskMessageResponse {
  string status = 1;
}

//--------------------------------------

message ConversationRender {
  string conversationID = 1;
  repeated Participant participants = 2;
  string createdAt = 3;
  string editedAt = 4;
  string metadata = 5;
  string state = 6;
  int64 totalUnread = 7;
}

message Participant {
	string userID = 1;
	string UserType =2;
	string UserRole =3;
	string Username =4;
	string AvatarUrl =5;
}

// Conversation
message Conversation {
  string conversationID = 1;
  repeated string participants = 2;
  string createdAt = 3;
  string editedAt = 4;
  string metadata = 5;
  string state = 6;
}


// Message
message Message {
  string messageID = 1;
  string conversationID = 2;
  string sender = 3;
  string senderType = 4;
  string content = 5;
  string state = 6;
  string createdAt = 7;
  string metadata = 8;
}

// Task Data
message TaskData {
  string messageID = 1;
  string conversationID = 2;
  string sender = 3;
  string content = 4;
  int64 timestamp = 5;
  string state = 6;
  string metadata = 7;
  repeated string recipient = 8;
}